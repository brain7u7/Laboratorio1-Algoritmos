import random
import time
import math

# Función para generar n puntos aleatorios en 2D
def generar_puntos(n):
    return [(random.uniform(-10, 10), random.uniform(-10, 10)) for _ in range(n)]

# Función para calcular la distancia euclidiana entre dos puntos
def distancia_euclidiana(p1, p2):
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

# Función para encontrar el par de puntos más cercano usando "Divide and Conquer"
def encontrar_puntos_cercanos_dc(puntos):
    puntos.sort(key=lambda p: p[0])  # Ordenar puntos por la coordenada x
    return _divide_and_conquer(puntos)

def _divide_and_conquer(puntos):
    if len(puntos) <= 3:
        # Para conjuntos pequeños, usar la solución por fuerza bruta
        return fuerza_bruta(puntos)
    
    # Dividir el conjunto de puntos en dos mitades
    mitad = len(puntos) // 2
    puntos_izquierda = puntos[:mitad]
    puntos_derecha = puntos[mitad:]

    # Encontrar el par más cercano en cada mitad
    (p1_izq, p2_izq, dist_izq) = _divide_and_conquer(puntos_izquierda)
    (p1_der, p2_der, dist_der) = _divide_and_conquer(puntos_derecha)

    # Encontrar la distancia mínima entre las dos mitades
    min_dist = min(dist_izq, dist_der)
    if dist_izq < dist_der:
        min_p1, min_p2 = p1_izq, p2_izq
    else:
        min_p1, min_p2 = p1_der, p2_der

    # Verificar si hay un par más cercano cruzando la línea divisoria
    mid_x = puntos[mitad][0]
    puntos_cercanos_a_la_frontera = [p for p in puntos if abs(p[0] - mid_x) < min_dist]

    # Ordenar los puntos por la coordenada y
    puntos_cercanos_a_la_frontera.sort(key=lambda p: p[1])

    # Comparar los puntos cercanos a la frontera
    for i in range(len(puntos_cercanos_a_la_frontera)):
        for j in range(i + 1, min(i + 7, len(puntos_cercanos_a_la_frontera))):
            p1, p2 = puntos_cercanos_a_la_frontera[i], puntos_cercanos_a_la_frontera[j]
            dist = distancia_euclidiana(p1, p2)
            if dist < min_dist:
                min_dist = dist
                min_p1, min_p2 = p1, p2

    return min_p1, min_p2, min_dist

# Solución por fuerza bruta para cuando hay pocos puntos
def fuerza_bruta(puntos):
    min_distancia = float('inf')
    punto1 = punto2 = None
    for i in range(len(puntos)):
        for j in range(i + 1, len(puntos)):
            dist = distancia_euclidiana(puntos[i], puntos[j])
            if dist < min_distancia:
                min_distancia = dist
                punto1, punto2 = puntos[i], puntos[j]
    return punto1, punto2, min_distancia

# Función para probar el programa y medir los tiempos
def probar_tiempos(n_valores):
    for n in n_valores:
        puntos = generar_puntos(n)
        inicio = time.time()
        punto1, punto2, min_distancia = encontrar_puntos_cercanos_dc(puntos)
        fin = time.time()
        print(f"n={n}: Tiempo de ejecución: {fin - inicio:.6f} segundos. Par más cercano: {punto1} y {punto2} con distancia {min_distancia:.6f}")

# Valores de n a probar
n_valores = [10, 100, 1000, 10000, 100000]
probar_tiempos(n_valores)
